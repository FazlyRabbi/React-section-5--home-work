{"id":"../node_modules/mime/mime.js","dependencies":[{"name":"C:\\Users\\ytgg\\Desktop\\React\\package.json","includedInParent":true,"mtime":1569047559418},{"name":"C:\\Users\\ytgg\\Desktop\\React\\node_modules\\mime\\package.json","includedInParent":true,"mtime":1569047118439},{"name":"path","loc":{"line":1,"column":19},"parent":"C:\\Users\\ytgg\\Desktop\\React\\node_modules\\mime\\mime.js","resolved":"C:\\Users\\ytgg\\Desktop\\React\\node_modules\\path-browserify\\index.js"},{"name":"fs","loc":{"line":2,"column":17},"parent":"C:\\Users\\ytgg\\Desktop\\React\\node_modules\\mime\\mime.js","resolved":"C:\\Users\\ytgg\\Desktop\\React\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"var __dirname = \"C:\\\\Users\\\\ytgg\\\\Desktop\\\\React\\\\node_modules\\\\mime\";\nvar path = require('path'),\n    fs = require('fs');\n\nvar mime = module.exports = {\n  /** Map of extension to mime type */\n  types: {},\n\n  /** Map of mime type to extension */\n  extensions :{},\n\n  /**\n   * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n   * to an array of extensions associated with the type.  The first extension is\n   * used as the default extension for the type.\n   *\n   * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n   *\n   * @param map (Object) type definitions\n   */\n  define: function(map) {\n    for (var type in map) {\n      var exts = map[type];\n\n      for (var i = 0; i < exts.length; i++) {\n        mime.types[exts[i]] = type;\n      }\n\n      // Default extension is the first one we encounter\n      if (!mime.extensions[type]) {\n        mime.extensions[type] = exts[0];\n      }\n    }\n  },\n\n  /**\n   * Load an Apache2-style \".types\" file\n   *\n   * This may be called multiple times (it's expected).  Where files declare\n   * overlapping types/extensions, the last file wins.\n   *\n   * @param file (String) path of file to load.\n   */\n  load: function(file) {\n    // Read file and split into lines\n    var map = {},\n        content = fs.readFileSync(file, 'ascii'),\n        lines = content.split(/[\\r\\n]+/);\n\n    lines.forEach(function(line, lineno) {\n      // Clean up whitespace/comments, and split into fields\n      var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n      map[fields.shift()] = fields;\n    });\n\n    mime.define(map);\n  },\n\n  /**\n   * Lookup a mime type based on extension\n   */\n  lookup: function(path, fallback) {\n    var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n    return mime.types[ext] || fallback || mime.default_type;\n  },\n\n  /**\n   * Return file extension associated with a mime type\n   */\n  extension: function(mimeType) {\n    return mime.extensions[mimeType];\n  },\n\n  /**\n   * Lookup a charset based on mime type.\n   */\n  charsets: {\n    lookup: function (mimeType, fallback) {\n      // Assume text types are utf8.  Modify mime logic as needed.\n      return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n    }\n  }\n};\n\n// Load our local copy of\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nmime.load(path.join(__dirname, 'types/mime.types'));\n\n// Overlay enhancements submitted by the node.js community\nmime.load(path.join(__dirname, 'types/node.types'));\n\n// Set the default type\nmime.default_type = mime.types.bin;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/mime/mime.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/mime/mime.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}}],"sources":{"../node_modules/mime/mime.js":"var path = require('path'),\n    fs = require('fs');\n\nvar mime = module.exports = {\n  /** Map of extension to mime type */\n  types: {},\n\n  /** Map of mime type to extension */\n  extensions :{},\n\n  /**\n   * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n   * to an array of extensions associated with the type.  The first extension is\n   * used as the default extension for the type.\n   *\n   * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n   *\n   * @param map (Object) type definitions\n   */\n  define: function(map) {\n    for (var type in map) {\n      var exts = map[type];\n\n      for (var i = 0; i < exts.length; i++) {\n        mime.types[exts[i]] = type;\n      }\n\n      // Default extension is the first one we encounter\n      if (!mime.extensions[type]) {\n        mime.extensions[type] = exts[0];\n      }\n    }\n  },\n\n  /**\n   * Load an Apache2-style \".types\" file\n   *\n   * This may be called multiple times (it's expected).  Where files declare\n   * overlapping types/extensions, the last file wins.\n   *\n   * @param file (String) path of file to load.\n   */\n  load: function(file) {\n    // Read file and split into lines\n    var map = {},\n        content = fs.readFileSync(file, 'ascii'),\n        lines = content.split(/[\\r\\n]+/);\n\n    lines.forEach(function(line, lineno) {\n      // Clean up whitespace/comments, and split into fields\n      var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n      map[fields.shift()] = fields;\n    });\n\n    mime.define(map);\n  },\n\n  /**\n   * Lookup a mime type based on extension\n   */\n  lookup: function(path, fallback) {\n    var ext = path.replace(/.*[\\.\\/]/, '').toLowerCase();\n    return mime.types[ext] || fallback || mime.default_type;\n  },\n\n  /**\n   * Return file extension associated with a mime type\n   */\n  extension: function(mimeType) {\n    return mime.extensions[mimeType];\n  },\n\n  /**\n   * Lookup a charset based on mime type.\n   */\n  charsets: {\n    lookup: function (mimeType, fallback) {\n      // Assume text types are utf8.  Modify mime logic as needed.\n      return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n    }\n  }\n};\n\n// Load our local copy of\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nmime.load(path.join(__dirname, 'types/mime.types'));\n\n// Overlay enhancements submitted by the node.js community\nmime.load(path.join(__dirname, 'types/node.types'));\n\n// Set the default type\nmime.default_type = mime.types.bin;\n"},"lineCount":94}},"error":null,"hash":"27e1f0f0e32fa0ae3bb7e428caf36cfb","cacheData":{"env":{}}}